import { ApiError } from "../utils/apiError.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/apiResponse.js";

const registerUser = asyncHandler(async (req, res) => {
  console.log("req body", req.body);

  const { userName, email, fullName, password } = req.body;

  if (
    [fullName, email, password, userName].some((field) => field.trim() === "")
  ) {
    throw new ApiError(400, "All fields are required");
  }

  console.log("email", email);

  //  adding validation to check that if email contais @ symbol

  if (!email.includes("@")) throw new ApiError(400, "Email is not valid");

  //  check that if the user is already present in the database.
  const existingUser = await User.findOne({ email });

  // const passwordCheck = await existingUser.isPasswordCorrect(password);
  // console.log("password check", passwordCheck);
  // console.log("existing user", existingUser);

  if (existingUser) {
    throw new ApiError(409, "User already exist"); // we are throwing the api error class and it will caught by async handler catch block
  }

  console.log("request file object", req.files);

  const avatarLocalPath = req?.files?.avatar[0]?.path;

  console.log("avatarLocalPath", avatarLocalPath);

  const coverImageLocalPath =
    req?.files?.coverImage && req?.files?.coverImage[0]?.path;

  console.log("coverImageLocalPath", coverImageLocalPath);

  req.files ? console.log("req.files", req.files) : null;

  if (!avatarLocalPath) throw new ApiError(400, "Avatar file is required");

  const cloudinaryAvatarUrl = await uploadOnCloudinary(avatarLocalPath);
  console.log("cloudinaryAvatarUrl", cloudinaryAvatarUrl);

  const cloudinaryCoverImageUrl = await uploadOnCloudinary(coverImageLocalPath);
  console.log("cloudinaryCoverImageUrl", cloudinaryCoverImageUrl);

  if (!cloudinaryAvatarUrl)
    throw new ApiError(400, "Cloudinary Avatar file is required");

  const DB = await User.create({
    userName: userName.toLowerCase(),
    avatar: cloudinaryAvatarUrl?.url,
    coverImage: cloudinaryCoverImageUrl?.url || "",
    fullName,
    email,
    password,
  });

  console.log("Database updated successfully", DB);

  const createdUser = await User.findById(DB._id)?.select(
    // the _id is generated by mongo db we are finding the created entry.

    "-password -refreshToken" // In the select method by default all the values are selected for example username, email, password so by adding -sign before the value name so the particular value will get neglected / remove.
  );

  if (!createdUser)
    throw new ApiError(500, "Something went wrong while registering the user");

  User.isPasswordCorrect();

  res
    .status(201)
    .json(new ApiResponse(200, createdUser, "User registered successfully"));

  return res.end();

  //   new ApiResponse(200, createdUser);

  // get user details from frontend
  // validation - not empty
  // check if user already exists: username, email
  // check avatar
  // upload the avatar to cloudinary, check that avatar get uploads on cloudinary
  //    create user object - create entry in db
  // remove password and refresh token field
  // check for user creation
  //   return res
});

export { registerUser };
